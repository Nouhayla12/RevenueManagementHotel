# app.py
import streamlit as st
import pandas as pd
import numpy as np
import joblib
from xgboost import XGBClassifier

# Titre de l'application
st.title("Pr√©diction de R√©servation H√¥teli√®re üè®")


# Charger le mod√®le XGBoost
@st.cache_resource
def load_model():
    model = XGBClassifier()
    model.load_model("xgboost_model.json")  # Charger le mod√®le XGBoost
    return model

# Charger le scaler
@st.cache_resource
def load_scaler():
    scaler = joblib.load("scaler.pkl")  # Charger le scaler
    return scaler

# Charger le mod√®le et le scaler
model = load_model()
scaler = load_scaler()

# Formulaire pour saisir les donn√©es
st.sidebar.header("Saisissez les informations de la r√©servation")

# Fonction pour saisir les donn√©es
def user_input_features():
    no_of_adults = st.sidebar.number_input("Nombre d'adultes", min_value=0, max_value=10, value=2)
    no_of_children = st.sidebar.number_input("Nombre d'enfants", min_value=0, max_value=10, value=0)
    no_of_weekend_nights = st.sidebar.number_input("Nombre de nuits le week-end", min_value=0, max_value=10, value=1)
    no_of_week_nights = st.sidebar.number_input("Nombre de nuits en semaine", min_value=0, max_value=10, value=2)
    lead_time = st.sidebar.number_input("D√©lai de r√©servation (en jours)", min_value=0, max_value=365, value=30)
    repeated_guest = st.sidebar.selectbox("Client r√©p√©t√© ?", options=[-1, 1], format_func=lambda x: "Non" if x == -1 else "Oui")
    no_of_previous_cancellations = st.sidebar.number_input("Nombre d'annulations pr√©c√©dentes", min_value=0, max_value=10, value=0)
    no_of_previous_bookings_not_canceled = st.sidebar.number_input("Nombre de r√©servations non annul√©es", min_value=0, max_value=10, value=0)
    no_of_special_requests = st.sidebar.number_input("Nombre de demandes sp√©ciales", min_value=0, max_value=10, value=0)

    # Cr√©er un DataFrame avec les donn√©es saisies
    data = {
        'no_of_adults': no_of_adults,
        'no_of_children': no_of_children,
        'no_of_weekend_nights': no_of_weekend_nights,
        'no_of_week_nights': no_of_week_nights,
        'lead_time': lead_time,
        'repeated_guest': repeated_guest,
        'no_of_previous_cancellations': no_of_previous_cancellations,
        'no_of_previous_bookings_not_canceled': no_of_previous_bookings_not_canceled,
        'no_of_special_requests': no_of_special_requests,
    }
    features = pd.DataFrame(data, index=[0])
    return features

# Saisie des donn√©es
input_df = user_input_features()

# Afficher les donn√©es saisies
st.subheader("Donn√©es saisies")
st.write(input_df)

# Pr√©traitement des donn√©es
input_scaled = scaler.transform(input_df)

# Pr√©diction
if st.sidebar.button("Pr√©dire"):
    prediction = model.predict(input_scaled)
    prediction_proba = model.predict_proba(input_scaled)

    st.subheader("R√©sultat de la pr√©diction")
    if prediction[0] == 1:
        st.success("La r√©servation ne sera **pas annul√©e**.")
    else:
        st.error("La r√©servation sera **annul√©e**.")

    st.subheader("Probabilit√©s")
    st.write(f"Probabilit√© d'annulation : {prediction_proba[0][0]:.2f}")
    st.write(f"Probabilit√© de non-annulation : {prediction_proba[0][1]:.2f}")